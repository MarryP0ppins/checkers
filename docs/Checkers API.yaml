openapi: 3.0.3
info:
  title: Checkers API
  version: 1.0.0
  description: Checkers Online
paths:
  /game/:
    get:
      operationId: game_list
      parameters:
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          enum:
          - CREATE
          - FINISHED
          - IN_PROCESS
      tags:
      - game
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
          description: ''
    post:
      operationId: game_create
      tags:
      - game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Game'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
  /game/{id}/:
    get:
      operationId: game_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - game
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    patch:
      operationId: game_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGame'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGame'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGame'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
          description: ''
    delete:
      operationId: game_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this game.
        required: true
      tags:
      - game
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /move/:
    get:
      operationId: move_list
      parameters:
      - in: query
        name: checker_id
        schema:
          type: number
      - in: query
        name: game
        schema:
          type: integer
      - in: query
        name: user
        schema:
          type: integer
      tags:
      - move
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Move'
          description: ''
    post:
      operationId: move_create
      tags:
      - move
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Move'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Move'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Move'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Move'
          description: ''
  /move/{id}/:
    get:
      operationId: move_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this move.
        required: true
      tags:
      - move
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Move'
          description: ''
    delete:
      operationId: move_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this move.
        required: true
      tags:
      - move
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /profile/:
    get:
      operationId: profile_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - profile
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
          description: ''
  /profile/{id}/:
    get:
      operationId: profile_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - profile
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: profile_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this profile.
        required: true
      tags:
      - profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfile'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /user/:
    get:
      operationId: user_retrieve
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRetrieveUpdate'
          description: ''
    put:
      operationId: user_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRetrieveUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRetrieveUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRetrieveUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRetrieveUpdate'
          description: ''
    patch:
      operationId: user_partial_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRetrieveUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRetrieveUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRetrieveUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRetrieveUpdate'
          description: ''
    delete:
      operationId: user_destroy
      tags:
      - user
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /user/login/:
    post:
      operationId: user_login_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /user/logout/:
    post:
      operationId: user_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenBlacklist'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenBlacklist'
          description: ''
  /user/refresh-token/:
    post:
      operationId: user_refresh_token_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /user/registration/:
    post:
      operationId: user_registration_create
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: ''
components:
  schemas:
    Game:
      type: object
      description: |-
        user_1 = serializers.SerializerMethodField('_get_username_1')
        user_2 = serializers.SerializerMethodField('_get_username_2')

        def _get_username_1(self, data):
            return f'{data.user_1.username}'

        def _get_username_2(self, data):
            return f'{data.user_2.username}'
      properties:
        id:
          type: integer
          readOnly: true
        user_1:
          type: integer
        user_2:
          type: integer
        start_at:
          type: string
          format: date-time
          nullable: true
        finish_at:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        moves:
          type: object
          additionalProperties: {}
          nullable: true
      required:
      - id
      - status
      - user_1
      - user_2
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          maxLength: 128
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          maxLength: 255
        access_token:
          type: string
          readOnly: true
          maxLength: 255
        refresh_token:
          type: string
          readOnly: true
          maxLength: 255
      required:
      - access_token
      - email
      - id
      - password
      - refresh_token
      - username
    Move:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        game:
          type: integer
        user:
          type: integer
        checker_id:
          type: string
          format: decimal
          pattern: ^-?\d{0,1}(?:\.\d{0,0})?$
        new_position:
          type: string
          maxLength: 2
        is_last_move:
          type: boolean
        is_white:
          type: boolean
      required:
      - checker_id
      - game
      - id
      - new_position
      - user
    PatchedGame:
      type: object
      description: |-
        user_1 = serializers.SerializerMethodField('_get_username_1')
        user_2 = serializers.SerializerMethodField('_get_username_2')

        def _get_username_1(self, data):
            return f'{data.user_1.username}'

        def _get_username_2(self, data):
            return f'{data.user_2.username}'
      properties:
        id:
          type: integer
          readOnly: true
        user_1:
          type: integer
        user_2:
          type: integer
        start_at:
          type: string
          format: date-time
          nullable: true
        finish_at:
          type: string
          format: date-time
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        moves:
          type: object
          additionalProperties: {}
          nullable: true
    PatchedProfile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        wins:
          type: integer
          maximum: 65535
          minimum: 0
        games:
          type: integer
          maximum: 65535
          minimum: 0
        rating:
          type: integer
          maximum: 65535
          minimum: 0
    PatchedUserRetrieveUpdate:
      type: object
      description: Осуществляет сериализацию и десериализацию объектов User.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 32
        username:
          type: string
          maxLength: 16
        password:
          type: string
          writeOnly: true
          maxLength: 16
          minLength: 8
        profile:
          type: string
          readOnly: true
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
        wins:
          type: integer
          maximum: 65535
          minimum: 0
        games:
          type: integer
          maximum: 65535
          minimum: 0
        rating:
          type: integer
          maximum: 65535
          minimum: 0
      required:
      - id
      - username
    Registration:
      type: object
      description: |-
        Creates a new user.
        Email, username, and password are required.
        Returns a JSON web token.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 32
        username:
          type: string
          maxLength: 16
        password:
          type: string
          writeOnly: true
          maxLength: 16
          minLength: 4
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
      - password2
      - username
    StatusEnum:
      enum:
      - CREATE
      - IN_PROCESS
      - FINISHED
      type: string
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
      required:
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserRetrieveUpdate:
      type: object
      description: Осуществляет сериализацию и десериализацию объектов User.
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 32
        username:
          type: string
          maxLength: 16
        password:
          type: string
          writeOnly: true
          maxLength: 16
          minLength: 8
        profile:
          type: string
          readOnly: true
      required:
      - email
      - id
      - password
      - profile
      - username
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "B"
